#include <Arduino.h>
#include <Wire.h>
#include "main.hpp"

#include <ESP8266WiFi.h> // Wifi ESP8266
extern "C"
{
#include "user_interface.h"

#include "c_types.h"
  bool PortalFlag = false;
}

// Select your modem:
#define TINY_GSM_MODEM_SIM7600

// Set serial for debug console (to the Serial Monitor, default speed 115200)
#define SerialMon Serial

#include <SoftwareSerial.h>
SoftwareSerial SerialAT(13, 12);  // RX, TX

// Use Hardware Serial on Mega, Leonardo, Micro
//#define SerialAT Serial2

// See all AT commands, if wanted
#define DUMP_AT_COMMANDS

// Define the serial console for debug prints, if needed
#define TINY_GSM_DEBUG SerialMon

#define PWRKEY 16      // GPIO pin used for PWRKEY
#define LED_PIN 2

// Your GPRS credentials, if any
const char apn[] = "web.colombiamovil.com.co";
//const char apn[] = "internet.comcel.com.co";
//const char apn[] = "internet.movistar.com.co";

// MQTT details
const char* broker = "sensor.aireciudadano.com";

const char* topicac = "measurement";
const char* topic = "config/";

String MQTT_send_topic;
String MQTT_receive_topic;
uint32_t lastReconnectAttempt = 0;

#include <TinyGsmClient.h>

// MQTT
#include <PubSubClient.h>
char MQTT_message[256];
//PubSubClient MQTT_client(wifi_client);
char received_payload[384];


#ifdef DUMP_AT_COMMANDS
#include <StreamDebugger.h>
StreamDebugger debugger(SerialAT, SerialMon);
TinyGsm modem(debugger);
#else
TinyGsm modem(SerialAT);
#endif

//TinyGsm modem(SerialAT);
TinyGsmClient client(modem);
PubSubClient MQTT_client(client);

String aireciudadano_device_id = "AireCiudadano_TestMQTT";
int pm25int = 4;
float latitudef = 4.6987;
float longitudef = -74.0987;
int inout = 1;

int ledStatus = HIGH;

String aireciudadano_string = "id: AireCiudadano_TestMQTT, PM25: 5, latitude: 4.6987, longitude: -74.0987, inout: 1";

void setup() {
  // Set console baud rate
  SerialMon.begin(115200);
  delay(100);

  pinMode(LED_PIN, OUTPUT);

  // Set GSM module baud rate
  SerialAT.begin(115200);

  SerialMon.println("");
  SerialMon.println("MONTiny: Wait...");

  // Restart takes quite some time
  SerialMon.println("MONTiny: Initializing modem...");
  modem.restart();
  // modem.init();

  delay(5000);

  String modemInfo = modem.getModemInfo();
  SerialMon.print("MONTiny: Modem Info: ");
  SerialMon.println(modemInfo);

  SerialMon.print("MONTiny: Waiting for network...");
  if (!modem.waitForNetwork()) {
    SerialMon.println("MONTiny:  fail");
    delay(10000);
    return;
  }
  SerialMon.println("MONTiny:  success");

  if (modem.isNetworkConnected()) {
    SerialMon.println("MONTiny: Network connected");
  }

  // GPRS connection parameters are usually set after network registration
  SerialMon.print("MONTiny: Connecting to ");
  SerialMon.print(apn);
  if (!modem.gprsConnect(apn)) {
    SerialMon.println("MONTiny:  fail");
    delay(10000);
    return;
  }
  SerialMon.println("MONTiny:  success");

  if (modem.isGprsConnected()) {
    SerialMon.println("MONTiny: GPRS connected");
  }

  // Make sure we're still registered on the network
  if (!modem.isNetworkConnected()) {
    SerialMon.println("MONTiny: Network disconnected");
    if (!modem.waitForNetwork(180000L, true)) {
      SerialMon.println("MONTiny:  fail");
      delay(10000);
      return;
    }
    if (modem.isNetworkConnected()) {
      SerialMon.println("MONTiny: Network re-connected");
    }

    if (!modem.isGprsConnected()) {
      SerialMon.println("MONTiny: GPRS disconnected!");
      SerialMon.print(F("Connecting to "));
      SerialMon.print(apn);
      if (!modem.gprsConnect(apn)) {
        SerialMon.println("MONTiny:  fail");
        delay(10000);
        return;
      }
      if (modem.isGprsConnected()) {
        SerialMon.println("MONTiny: GPRS reconnected");
      }
      Serial.println("MonTiny: NEW IP ADDRESS : " + modem.getLocalIP());
    }
  }
  MQTT_send_topic = "measurement"; // measurement are sent to this topic
  MQTT_receive_topic = "config/" + aireciudadano_device_id; // Config messages will be received in config/id

  Init_MQTT();

  SerialMon.println("MONTiny: Start Loop:");
  delay(1000);
}

void loop() {

  // Make sure we're still registered on the network
  if (!modem.isNetworkConnected()) {
    SerialMon.println("MONTiny: Network disconnected");
    if (!modem.waitForNetwork(180000L, true)) {
      SerialMon.println(" fail");
      delay(10000);
      return;
    }
    if (modem.isNetworkConnected()) {
      SerialMon.println("MONTiny:: Network re-connected");
    }
    // and make sure GPRS/EPS is still connected
    if (!modem.isGprsConnected()) {
      SerialMon.print("MONTiny: GPRS disconnected!");
      SerialMon.print(F("Connecting to "));
      SerialMon.print(apn);
      if (!modem.gprsConnect(apn)) {
        SerialMon.println("  fail");
        delay(10000);
        return;
      }
      if (modem.isGprsConnected())
      {
        SerialMon.println("MONTiny: GPRS reconnected");
      }
    }
  }

  SerialMon.println("MONTiny: IP ADDRESS : " + modem.getLocalIP());

  MQTT_client.connect(aireciudadano_device_id.c_str());

  if (!MQTT_client.connected()) {
    SerialMon.println("=== MQTT NOT CONNECTED ===");
    // Reconnect every 10 seconds
    uint32_t t = millis();
    if (t - lastReconnectAttempt > 10000L) {
      lastReconnectAttempt = t;
      if (mqttConnectok()) {
        lastReconnectAttempt = 0;
      }
    }
    delay(100);
    return;
  }
  Send_Message_Cloud_App_MQTT();
  delay(1000);
  MQTT_client.loop();
  delay(1000);
  Serial.println("MONTiny: Delay 60seg");
  int i = 0;
  for (i = 0; i < 31; i++) {
    delay(2000);
    Serial.print(" ");
    Serial.print(i);
    MQTT_client.loop();
  }
  Serial.println(" ");
}

void Send_Message_Cloud_App_MQTT()
{ // Send measurements to the cloud application by MQTT

    if (pm25int == 61)
      pm25int = 0;
    else
      pm25int = pm25int + 1;

//  pm25int = random(1, 50);

  sprintf(MQTT_message, "{id: %s, PM25: %d, latitude: %f, longitude: %f, inout: %d}", aireciudadano_device_id.c_str(), pm25int, latitudef, longitudef, inout);

  MQTT_client.publish(MQTT_send_topic.c_str(), MQTT_message);

  Serial.print("MONTiny: Mensaje enviado: ");
  Serial.print(MQTT_send_topic.c_str());
  Serial.print(", ");
  Serial.println(MQTT_message);
  Serial.println("");

  digitalWrite(LED_PIN, LOW);
  delay(500);
  digitalWrite(LED_PIN, HIGH);
}

void Init_MQTT()
{ // MQTT Init function
  Serial.print("MonTiny: Attempting to connect to the MQTT broker ");
  Serial.print("sensor.aireciudadano.com");
  Serial.print(":");
  Serial.println("80");

  //  MQTT_client.setBufferSize(1024);

  MQTT_client.setServer("sensor.aireciudadano.com", 80);
  MQTT_client.setCallback(Receive_Message_Cloud_App_MQTT);

  MQTT_client.connect(aireciudadano_device_id.c_str());

  if (!MQTT_client.connected())
  {
    Serial.println("MONTiny: MQTT_Reconnect");
    Reconnect_MQTT();
  }
  else
  {
    // Once connected resubscribe
    MQTT_client.subscribe(MQTT_receive_topic.c_str());
    Serial.print("MONTiny: MQTT connected - Receive topic: ");
    Serial.println(MQTT_receive_topic);
  }
}

void Reconnect_MQTT()
{ // MQTT Init function

  MQTT_client.setServer("sensor.aireciudadano.com", 80);

  MQTT_client.connect(aireciudadano_device_id.c_str());

  while (!MQTT_client.connected())
  {
    delay(5000);
    MQTT_client.setServer("sensor.aireciudadano.com", 80);
    MQTT_client.connect(aireciudadano_device_id.c_str());
  }
  // Once connected resubscribe
  MQTT_client.subscribe(MQTT_receive_topic.c_str());
  Serial.print("MONTiny: MQTT connected - Receive topic: ");
  Serial.println(MQTT_receive_topic);
}

void Receive_Message_Cloud_App_MQTT(char *topic, byte *payload, unsigned int length)
{ // callback function to receive configuration messages from the cloud application by MQTT
  Serial.print(F("Message arrived: "));
  Serial.println(received_payload);
}

boolean mqttConnectok() {
  SerialMon.print("Connecting to ");
  SerialMon.print(broker);

  // Connect to MQTT Broker
  boolean status = MQTT_client.connect("GsmClientTest");

  // Or, if you want to authenticate MQTT:

  if (status == false) {
    SerialMon.println(" fail");
    return false;
  }
  SerialMon.println(" success");
  MQTT_client.subscribe(MQTT_receive_topic.c_str());
  return MQTT_client.connected();
}